2.7.3 :001 > ary = Array.new
 => [] 
2.7.3 :002 > Array.new(3)
 => [nil, nil, nil] 
2.7.3 :003 > Array.new(3, true)
 => [true, true, true] 
2.7.3 :004 > Array.new(4) {Hash.new}
 => [{}, {}, {}, {}] 
2.7.3 :005 > Array.new(4) {|i| i.to_s }
 => ["0", "1", "2", "3"] 
2.7.3 :013 > empty_table = Array.new(3) {Array.new(3)}
 => [[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]] 
2.7.3 :015 > array[1,-4]
 => nil 
2.7.3 :016 > array[-3,1]
 => [3] 
2.7.3 :017 > array[1]
 => 2 
2.7.3 :018 > array[100]
 => nil 
2.7.3 :019 > array[-3]
 => 3 
2.7.3 :020 > array[2,3]
 => [3, 4, 5] 
2.7.3 :021 > array[1..4]
 => [2, 3, 4, 5] 
2.7.3 :022 > array[1...4]
 => [2, 3, 4] 
2.7.3 :023 > array[1..3]
 => [2, 3, 4] 
2.7.3 :024 > array[1...3]
 => [2, 3] 
2.7.3 :026 > arr.fetch(100) 
Traceback (most recent call last):
        5: from /home/beryl/.rvm/rubies/ruby-2.7.3/bin/irb:23:in `<main>'
        4: from /home/beryl/.rvm/rubies/ruby-2.7.3/bin/irb:23:in `load'
        3: from /home/beryl/.rvm/rubies/ruby-2.7.3/lib/ruby/gems/2.7.0/gems/irb-1.2.6/exe/irb:11:in `<top (required)>'
        2: from (irb):26
        1: from (irb):26:in `fetch'
IndexError (index 100 outside of array bounds: -6...6)
2.7.3 :027 > arr.fetch(100, "oops")
 => "oops" 
2.7.3 :028 > arr
 => ["a", "b", "c", "d", "e", "f"] 
2.7.3 :029 > arr.fetch(3, "oops")
 => "d" 
2.7.3 :030 > arr.first
 => "a" 
2.7.3 :031 > arr.last
 => "f" 
2.7.3 :032 > arr.take(3)
 => ["a", "b", "c"] 
2.7.3 :033 > arr.drop(3)
 => ["d", "e", "f"] 
2.7.3 :034 > names=['Tarun','Darvesh','Bhawna','Aayush','Sumit','Anita']
 => ["Tarun", "Darvesh", "Bhawna", "Aayush", "Sumit", "Anita"] 
2.7.3 :035 > names.length
 => 6 
2.7.3 :036 > names.count
 => 6 
2.7.3 :037 > names.empty?
 => false 
2.7.3 :038 > names.include? 'Gajender'
 => false 
2.7.3 :039 > names.include? 'tarun'
 => false 
2.7.3 :040 > names.include? 'tarun'.capitalize
 => true 
2.7.3 :058 > arr=[1,2,3,4,]
 => [1, 2, 3, 4] 
2.7.3 :059 > arr.push(5)
 => [1, 2, 3, 4, 5] 
2.7.3 :060 > arr.insert(3, ['orange','mango','banana'])
 => [1, 2, 3, ["orange", "mango", "banana"], 4, 5] 
2.7.3 :061 > arr[3]
 => ["orange", "mango", "banana"] 
2.7.3 :062 > arr.pop
 => 5 
2.7.3 :063 > arr
 => [1, 2, 3, ["orange", "mango", "banana"], 4] 
2.7.3 :064 > arr.shift
 => 1 
2.7.3 :065 > arr.delete_at(2)
 => ["orange", "mango", "banana"] 
2.7.3 :066 > arr.delete(2)
 => 2 
2.7.3 :067 > arr
 => [3, 4] 
2.7.3 :068 > arr.push(5)
 => [3, 4, 5] 
2.7.3 :071 > arr.insert(3, nil)
 => [3, 4, 5, nil, nil, ["orange", "mango", "banana"]] 
2.7.3 :072 > arr.compact
 => [3, 4, 5, ["orange", "mango", "banana"]] 
2.7.3 :073 > arr.compact!
 => [3, 4, 5, ["orange", "mango", "banana"]] 
2.7.3 :074 > arr
 => [3, 4, 5, ["orange", "mango", "banana"]] 
2.7.3 :076 > arr=[1,2,3,1,1,1,1,2,2,2,2,1,3,3,3,3,4,4,4,4]
 => [1, 2, 3, 1, 1, 1, 1, 2, 2, 2, 2, 1, 3, 3, 3, 3, 4, 4, 4, 4] 
2.7.3 :077 > arr.uniq
 => [1, 2, 3, 4] 
2.7.3 :078 > a=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
 2.7.3 :082 > a.each {|a| print a -= 10, " "}
-9 -8 -7 -6 -5  => [1, 2, 3, 4, 5] 
2.7.3 :083 > words=%w[six five four three two one]
 => ["six", "five", "four", "three", "two", "one"] 
2.7.3 :084 > str =""
 => "" 
2.7.3 :090 > words.reverse_each {|w| str += "#{w} "}
 => ["six", "five", "four", "three", "two", "one"] 
2.7.3 :091 > str
 => "one two three four five six " 
2.7.3 :093 > a.map {|a| 2*a}
 => [2, 4, 6, 8, 10] 
2.7.3 :098 > a.map! {|a| a**2}
 => [1, 4, 9, 16, 25] 
2.7.3 :101 > a.select {|a| a>9}
 => [16, 25] 
2.7.3 :102 > a.select {|a| a<9}
 => [1, 4] 
2.7.3 :104 > a.select {|a| a<=9}
 => [1, 4, 9] 
2.7.3 :105 > a.select {|a| a*10<100}
 => [1, 4, 9] 
2.7.3 :106 > a.drop_while {|a| a*10<100}
 => [16, 25] 
2.7.3 :107 > a
 => [1, 4, 9, 16, 25] 
2.7.3 :108 > a.delete_if {|a| a*10<200}
 => [25] 
2.7.3 :109 > a
 => [25] 
2.7.3 :110 > a=[1,2,3,4,5,25,50]
 => [1, 2, 3, 4, 5, 25, 50] 
2.7.3 :111 > a.keep_if {|a| a*2 <100}
 => [1, 2, 3, 4, 5, 25] 
2.7.3 :112 > a
 => [1, 2, 3, 4, 5, 25] 
2.7.3 :113 > f_a=["my","name"]
 => ["my", "name"] 
2.7.3 :114 > s_a=Array.new(f_a)
 => ["my", "name"] 
2.7.3 :115 > s_a
 => ["my", "name"] 
2.7.3 :116 > f_a.equal? s_a
 => false 
2.7.3 :117 > f_a== s_a
 => true 
2.7.3 :121 > Array.new(3) {|a| a**2}
 => [0, 1, 4] 
2.7.3 :121 > Array.new(3) {|a| a**2}
 => [0, 1, 4] 
2.7.3 :122 > a=Array.new(2, Hash.new)
 => [{}, {}] 
2.7.3 :123 > a[0]["name"]="Darvesh"
 => "Darvesh" 
2.7.3 :124 > a
 => [{"name"=>"Darvesh"}, {"name"=>"Darvesh"}] 
2.7.3 :125 > a[0]
 => {"name"=>"Darvesh"} 
2.7.3 :126 > a[1]["class"]=1
 => 1 
2.7.3 :127 > a
 => [{"name"=>"Darvesh", "class"=>1}, {"name"=>"Darvesh", "class"=>1}] 
2.7.3 :128 > a = Array.new(2) {Hash.new}
 => [{}, {}] 
2.7.3 :129 > a[0]["name"]="Darvesh"
 => "Darvesh" 
2.7.3 :130 > a[0]["class"]=1
 => 1 
2.7.3 :131 > a
 => [{"name"=>"Darvesh", "class"=>1}, {}] 
2.7.3 :132 > Array.try_convert([1])
 => [1] 
2.7.3 :133 > Array.try_convert([1,2,3,4])
 => [1, 2, 3, 4] 
2.7.3 :135 > Array.try_convert("1")
 => nil 
2.7.3 :136 > [1,2,3,4,1,2] & [1,3,1,89]
 => [1, 3] 
2.7.3 :137 > ['a','b','B','d','f','g']&[ 'a', 'b', 'B' ]
 => ["a", "b", "B"] 
 2.7.3 :138 > [1,2,3]*3
 => [1, 2, 3, 1, 2, 3, 1, 2, 3] 
2.7.3 :139 > [1,2,3] * ","
 => "1,2,3" 
2.7.3 :140 > [1,2,3]+[3,4,5]
 => [1, 2, 3, 3, 4, 5] 
2.7.3 :141 > a=["a","b","c"]
 => ["a", "b", "c"] 
2.7.3 :142 > b=["d","e","f"]
 => ["d", "e", "f"] 
2.7.3 :143 > c=a+b
 => ["a", "b", "c", "d", "e", "f"] 
2.7.3 :144 > c
 => ["a", "b", "c", "d", "e", "f"] 
2.7.3 :145 > [1,2,3,1,2,3,11,11,1,1]-[1,2,3,11]
 => [] 
2.7.3 :146 > a=[1,2]
 => [1, 2] 
2.7.3 :147 > a<<"c"<<"d"<<[3,4]
 => [1, 2, "c", "d", [3, 4]] 
2.7.3 :148 > [ "a", "a", "c" ]    <=> [ "a", "b", "c" ] 
 => -1 
2.7.3 :149 > [ 1, 2, 3, 4, 5, 6 ] <=> [ 1, 2 ] 
 => 1 
2.7.3 :150 > [ 1, 2 ] <=> [ 1, :two ] 
 => nil 
2.7.3 :151 > [ "a", "c" ]    == [ "a", "c", 7 ]
 => false 
2.7.3 :152 > [ "a", "c",7 ]    == [ "a", "c", 7 ]
 => true 
2.7.3 :153 > [ "a", "c",'g' ]    == [ "a", "c", 7 ]
 => false 
2.7.3 :154 > a=Array.new
 => [] 
2.7.3 :155 > a[4]=4
 => 4 
2.7.3 :156 > a[0,3]=[1,2,3]
 => [1, 2, 3] 
2.7.3 :157 > a
 => [1, 2, 3, nil, 4] 
2.7.3 :158 > a[1..2]=["a","b"]
 => ["a", "b"] 
2.7.3 :159 > a
 => [1, "a", "b", nil, 4] 
2.7.3 :160 > a[0, 2]="?"
 => "?" 
2.7.3 :161 > a
 => ["?", "b", nil, 4] 
2.7.3 :162 > a[0..2]="A"
 => "A" 
2.7.3 :163 > a
 => ["A", 4] 
2.7.3 :164 > s1 = [ "colors", "red", "blue", "green" ]
 => ["colors", "red", "blue", "green"] 
2.7.3 :165 > s2 = [ "letters", "a", "b", "c" ]
 => ["letters", "a", "b", "c"] 
2.7.3 :166 > s3 = "foo"
 => "foo" 
2.7.3 :167 > a  = [ s1, s2, s3 ]
 => [["colors", "red", "blue", "green"], ["letters", "a", "b", "c"], ... 
2.7.3 :168 > a.assoc("letters")
 => ["letters", "a", "b", "c"] 
2.7.3 :169 > a.assoc("foo")
 => nil 
2.7.3 :170 > a = [ "a", "b", "c", "d", "e" ]
 => ["a", "b", "c", "d", "e"] 
2.7.3 :171 > a.at(0)
 => "a" 
2.7.3 :172 > a.at(-1)
 => "e" 
2.7.3 :173 > ary = [0, 4, 7, 10, 12]
 => [0, 4, 7, 10, 12] 
2.7.3 :174 > ary.bsearch {|x| x>=4}
 => 4 
2.7.3 :175 > ary.bsearch {|x| x>=6}
 => 7 
2.7.3 :176 > ary.bsearch {|x| x>=-1}
 => 0 
2.7.3 :177 > ary.bsearch {|x| x<=100}
 => 0 
2.7.3 :178 > ary.bsearch {|x| x>=100}
 => nil 
2.7.3 :179 > ary.bsearch {|x| 1-x/4}
 => 7 
2.7.3 :180 > ary.bsearch {|x| 4-x/2}
 => nil 
2.7.3 :181 > ary.bsearch_index {|x| x>=4}
 => 1 
 2.7.3 :182 > ary
 => [0, 4, 7, 10, 12] 
2.7.3 :183 > ary.clear
 => [] 
2.7.3 :184 > a=["a","b","c","d"]
 => ["a", "b", "c", "d"] 
2.7.3 :185 > a.collect {|x| x+"!"}
 => ["a!", "b!", "c!", "d!"] 
2.7.3 :186 > a.map.with_index {|c,i| c*i }
 => ["", "b", "cc", "ddd"] 
2.7.3 :187 > a.map! {|x| x + "!" }
 => ["a!", "b!", "c!", "d!"] 
2.7.3 :188 > a
 => ["a!", "b!", "c!", "d!"] 
2.7.3 :190 > a.collect!.with_index {|x, i| x[0...i] }
 => ["", "b", "c!", "d!"] 
2.7.3 :191 > a
 => ["", "b", "c!", "d!"] 
 2.7.3 :192 > a=[1,2,3,4]
 => [1, 2, 3, 4] 
2.7.3 :194 > a.combination(1).to_a
 => [[1], [2], [3], [4]] 
2.7.3 :195 > a.combination(2).to_a
 => [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] 
2.7.3 :196 > a.combination(3).to_a
 => [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]] 
2.7.3 :197 > a.combination(4).to_a
 => [[1, 2, 3, 4]] 
2.7.3 :198 > a.combination(0).to_a
 => [[]] 
2.7.3 :199 > a.combination(5).to_a
 => [] 
2.7.3 :200 > [ "a", nil, "b", nil, "c" ].compact!
 => ["a", "b", "c"] 
2.7.3 :201 > [ "a",  "b",  "c" ].compact!
 => nil 
2.7.3 :202 > [ "a", "b" ].concat( ["c", "d"]) 
 => ["a", "b", "c", "d"] 
2.7.3 :202 > [ "a", "b" ].concat( ["c", "d"]) 
 => ["a", "b", "c", "d"] 
2.7.3 :203 > [ "a" ].concat( ["b"], ["c", "d"])
 => ["a", "b", "c", "d"] 
2.7.3 :204 > [ "a" ].concat
 => ["a"] 
2.7.3 :205 > a = [ 1, 2 ]
 => [1, 2] 
2.7.3 :206 > a.concat(a, a)
 => [1, 2, 1, 2, 1, 2] 
2.7.3 :207 > ary=[1,2,3,4]
 => [1, 2, 3, 4] 
2.7.3 :208 > ary.count
 => 4 
2.7.3 :209 > ary.count(2)
 => 1 
2.7.3 :210 > ary.count {|x| x%2 == 0}
 => 2 
2.7.3 :002 > a = ["a", "b", "c"]
 => ["a", "b", "c"] 
2.7.3 :003 > a.cycle(2) {|x| puts x}
a
b
c
a
b
c
 => nil 
2.7.3 :004 > a = [ "a", "b", "b", "b", "c" ]
 => ["a", "b", "b", "b", "c"] 
2.7.3 :005 > a.delete("b")
 => "b" 
2.7.3 :006 > a
 => ["a", "c"] 
2.7.3 :007 > a.delete("z") 
 => nil 
2.7.3 :008 > a.delete("z") {"not found"}
 => "not found" 
2.7.3 :011 > [ 1, 1, 2, 2, 3, 3, 4, 5 ].difference([ 1, 2, 4 ])
 => [3, 3, 5] 
2.7.3 :012 > [ 1, 'c', :s, 'yep' ].difference([ 1 ], [ 'a', 'c' ])
 => [:s, "yep"] 
2.7.3 :013 > a = [[1, [2, 3]]]
 => [[1, [2, 3]]] 
2.7.3 :014 > a.dig(0, 1, 1) 
 => 3 
2.7.3 :015 > a.dig(1, 2, 3) 
 => nil 
2.7.3 :017 > a = [1, 2, 3, 4, 5, 0]
 => [1, 2, 3, 4, 5, 0] 
2.7.3 :018 > a.drop(3)
 => [4, 5, 0] 
2.7.3 :019 > a = [1, 2, 3, 4, 5, 0]
 => [1, 2, 3, 4, 5, 0] 
2.7.3 :020 > a.drop_while {|i| i < 3 }
 => [3, 4, 5, 0]
2.7.3 :021 > a = [ "a", "b", "c" ]
 => ["a", "b", "c"] 
2.7.3 :022 > a.each {|x| print x, " -- " }
a -- b -- c --  => ["a", "b", "c"] 
2.7.3 :023 > a.each_index {|x| print x, " -- " }
0 -- 1 -- 2 --  => ["a", "b", "c"] 
2.7.3 :024 > [].empty?
 => true 
2.7.3 :025 > a = [ 11, 22, 33, 44 ]
 => [11, 22, 33, 44] 
2.7.3 :026 > a.fetch(1) 
 => 22 
2.7.3 :027 > a.fetch(-1)
 => 44 
2.7.3 :028 > a.fetch(4, 'cat') 
 => "cat" 
2.7.3 :029 > a.fetch(100) {|i| puts "#{i} is out of bounds"}
100 is out of bounds
 => nil 
2.7.3 :030 > a = [ "a", "b", "c", "d" ]
 => ["a", "b", "c", "d"] 
2.7.3 :031 > a.fill("x")    
 => ["x", "x", "x", "x"] 
2.7.3 :032 > a.fill("z", 2, 2)
 => ["x", "x", "z", "z"] 
2.7.3 :033 > a.fill("y", 0..1)
 => ["y", "y", "z", "z"] 
2.7.3 :034 > a.fill {|i| i*i}
 => [0, 1, 4, 9] 
2.7.3 :035 > a.fill(-2) {|i| i*i*i}
 => [0, 1, 8, 27] 
2.7.3 :038 > [1,2,3,4,5].filter {|num| num.even? }     
 => [2, 4] 
2.7.3 :039 > a
 => [0, 1, 8, 27] 
2.7.3 :040 > [1,2,3,4,5].filter!{|num| num.even? }     
 => [2, 4] 
2.7.3 :044 > a = [ "a", "b", "c" ]
 => ["a", "b", "c"] 
2.7.3 :045 > a.index("a")
 => 0 
2.7.3 :046 > a.find_index("a")
 => 0 
2.7.3 :047 > a.index("e")
 => nil 
2.7.3 :048 > a.find_index("e")
 => nil 
2.7.3 :049 > a = [ 1, 2, [3, [4, 5] ] ]
 => [1, 2, [3, [4, 5]]] 
2.7.3 :050 > a.flatten
 => [1, 2, 3, 4, 5] 
2.7.3 :051 > a
 => [1, 2, [3, [4, 5]]] 
2.7.3 :052 > a.flatten(1)
 => [1, 2, 3, [4, 5]] 
2.7.3 :056 > a.include?(1)
 => true 
2.7.3 :057 > a.include?(20)
 => false 
 2.7.3 :061 > a
 => [1, 2, 3, [4, 5]] 
2.7.3 :062 > a.replace([7,8,9])
 => [7, 8, 9] 
2.7.3 :063 > a
 => [7, 8, 9] 
2.7.3 :064 > [ 1, 1, 3, 5 ].intersection([ 3, 2, 1 ])   
 => [1, 3] 
 2.7.3 :065 > [ "a", "b", "c" ].join  
 => "abc" 
2.7.3 :067 > [ "a", "b", "c" ].join  ("-")
 => "a-b-c" 
2.7.3 :068 > a=[22,34,21,34]
 => [22, 34, 21, 34] 
2.7.3 :069 > a.max
 => 34 
2.7.3 :070 > a.min
 => 21 
2.7.3 :071 > a.minmax
 => [21, 34] 
 2.7.3 :072 > a.none?
 => false 
2.7.3 :073 > ab=[]
 => [] 
2.7.3 :075 > ab.none?
 => true 
2.7.3 :076 > a=["a","b","c"]
 => ["a", "b", "c"] 
2.7.3 :077 > a.pack("A3A3A3")
 => "a  b  c  " 
2.7.3 :083 > a=[1,2,3]
 => [1, 2, 3] 
2.7.3 :084 > a.permutation.to_a
 => [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 
2.7.3 :085 > a.permutation(3).to_a
 => [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]] 
2.7.3 :086 > a.permutation(2).to_a
 => [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]] 
2.7.3 :087 > a.permutation(1).to_a
 => [[1], [2], [3]] 
2.7.3 :088 > [1,2,3].product([4,5])
 => [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]] 
2.7.3 :089 > [1,2,3].product()
 => [[1], [2], [3]] 
2.7.3 :090 > [1,2,3].product([])
 => [] 
2.7.3 :091 > a = [ [ 1, "one"], [2, "two"], [3, "three"], ["ii"
, "two"] ]
 => [[1, "one"], [2, "two"], [3, "three"], ["ii", "two"]] 
2.7.3 :092 > a.rassoc("two") 
 => [2, "two"] 
2.7.3 :093 > a.rassoc("FOUR") 
 => nil 
2.7.3 :097 > [1,2,3].reject{|i| i<2}
 => [2, 3] 
2.7.3 :098 > a=[1,2,3]
 => [1, 2, 3] 
2.7.3 :099 > a.reject{|i| i<2}
 => [2, 3] 
2.7.3 :100 > a
 => [1, 2, 3] 
2.7.3 :101 > a.reject!{|i| i<2}
 => [2, 3] 
2.7.3 :102 > a
 => [2, 3] 
2.7.3 :103 > a = [1, 2, 3]
 => [1, 2, 3] 
2.7.3 :104 > a.repeated_combination(1).to_a
 => [[1], [2], [3]] 
2.7.3 :105 > a.repeated_combination(2).to_a
 => [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 3]] 
2.7.3 :106 > a.repeated_combination(3).to_a
 => [[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 2, 3], [1, 3, 3], [2, 2, 2], [2, 2, 3], [2, 3, 3], [3, 3, 3]] 
2.7.3 :107 > a.repeated_combination(4).to_a
 => [[1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 1, 3], [1, 1, 2, 2], [1, 1, 2, 3], [1, 1, 3, 3], [1, 2, 2, 2], [1, 2, 2, 3], [1, 2, 3, 3], [1, 3, 3, 3], [2, 2, 2, 2], [2, 2, 2, 3], [2, 2, 3, 3], [2, 3, 3, 3], [3, 3, 3, 3]] 
2.7.3 :108 > a.repeated_combination(0).to_a
 => [[]] 
2.7.3 :109 > a.repeated_combination(6).to_a
 => [[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 2, 3], [1, 1, 1, 1, 3, 3], [1, 1, 1, 2, 2, 2], [1, 1, 1, 2, 2, 3], [1, 1, 1, 2, 3, 3], [1, 1, 1, 3, 3, 3], [1, 1, 2, 2, 2, 2], [1, 1, 2, 2, 2, 3], [1, 1, 2, 2, 3, 3], [1, 1, 2, 3, 3, 3], [1, 1, 3, 3, 3, 3], [1, 2, 2, 2, 2, 2], [1, 2, 2, 2, 2, 3], [1, 2, 2, 2, 3, 3], [1, 2, 2, 3, 3, 3], [1, 2, 3, 3, 3, 3], [1, 3, 3, 3, 3, 3], [2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 3, 3], [2, 2, 2, 3, 3, 3], [2, 2, 3, 3, 3, 3], [2, 3, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3]] 
2.7.3 :110 > a.repeated_permutation(1).to_a
 => [[1], [2], [3]] 
2.7.3 :111 > a.repeated_permutation(2).to_a
 => [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]] 
2.7.3 :112 > a.repeated_permutation(3).to_a
 => [[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 1], [1, 2, 2], [1, 2, 3], [1, 3, 1], [1, 3, 2], [1, 3, 3], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 2, 1], [2, 2, 2], [2, 2, 3], [2, 3, 1], [2, 3, 2], [2, 3, 3], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 2, 1], [3, 2, 2], [3, 2, 3], [3, 3, 1], [3, 3, 2], [3, 3, 3]] 
 2.7.3 :113 > ["a",'b','c'].reverse
 => ["c", "b", "a"] 
2.7.3 :114 > [1,2,3].reverse
 => [3, 2, 1] 
2.7.3 :115 > [1].reverse
 => [1] 
2.7.3 :116 > a
 => [1, 2, 3] 
2.7.3 :117 > a.reverse
 => [3, 2, 1] 
2.7.3 :118 > a
 => [1, 2, 3] 
2.7.3 :119 > a.reverse!
 => [3, 2, 1] 
2.7.3 :120 > a
 => [3, 2, 1] 
2.7.3 :121 > a=['a','b','c']
 => ["a", "b", "c"] 
2.7.3 :122 > a.reverse_each {|x| print x, " "}
c b a  => ["a", "b", "c"] 
2.7.3 :123 > a = [ "a", "b", "b", "b", "c" ]
 => ["a", "b", "b", "b", "c"] 
2.7.3 :124 > a.rindex("b")
 => 3 
2.7.3 :125 > a.rindex("c")
 => 4 
2.7.3 :126 > a
 => ["a", "b", "b", "b", "c"] 
2.7.3 :127 > a.rotate
 => ["b", "b", "b", "c", "a"] 
2.7.3 :128 > a
 => ["a", "b", "b", "b", "c"] 
2.7.3 :129 > a.rotate!
 => ["b", "b", "b", "c", "a"] 
2.7.3 :130 > a
 => ["b", "b", "b", "c", "a"] 
 2.7.3 :132 > a=[1,2,34,121,344,1323,1211]
 => [1, 2, 34, 121, 344, 1323, 1211] 
2.7.3 :133 > a.sample
 => 1323 
2.7.3 :134 > a.sample(3)
 => [1211, 121, 1] 
2.7.3 :136 > a
 => [1, 2, 34, 121, 344, 1323, 1211] 
2.7.3 :137 > a.shuffle
 => [2, 34, 1, 1211, 1323, 121, 344] 
2.7.3 :138 > a
 => [1, 2, 34, 121, 344, 1323, 1211] 
2.7.3 :139 > a.shuffle!
 => [1211, 121, 1323, 2, 1, 34, 344] 
2.7.3 :140 > a
 => [1211, 121, 1323, 2, 1, 34, 344] 
2.7.3 :144 > a.slice(2,3)
 => ["b", "b", "c"] 
2.7.3 :145 > a
 => ["a", "b", "b", "b", "c"] 
 2.7.3 :148 > a.slice!(2..3)
 => ["b", "b"] 
2.7.3 :149 > a
 => ["a", "b", "c"] 
 2.7.3 :152 > a
 => ["c", "b", "a"] 
2.7.3 :153 > a.sort
 => ["a", "b", "c"] 
2.7.3 :154 > a
 => ["c", "b", "a"] 
2.7.3 :155 > a.sort!
 => ["a", "b", "c"] 
2.7.3 :156 > [1,2,3].sum
 => 6 
2.7.3 :157 > [1,2,3].sum(0.0)
 => 6.0 
2.7.3 :158 > [1,2,3].sum(0.0){|x| x**2}
 => 14.0 
2.7.3 :163 > a
 => ["a", "b", "c"] 
2.7.3 :164 > a.sum("")
 => "abc" 
2.7.3 :165 > a=[1,2,3,4,5]
 => [1, 2, 3, 4, 5] 
2.7.3 :166 > a.take(3)
 => [1, 2, 3] 
2.7.3 :168 > a.take_while{|i| i<3}
 => [1, 2] 
2.7.3 :176 > [["foo", "bar"],[1, 2]].to_h
 => {"foo"=>"bar", 1=>2} 
2.7.3 :179 > a=[[1,2],[3,4],[5,6]]
 => [[1, 2], [3, 4], [5, 6]] 
2.7.3 :180 > a.transpose
 => [[1, 3, 5], [2, 4, 6]] 
2.7.3 :181 > [ "a", "b", "c" ].union( [ "c", "d", "a" ] )
 => ["a", "b", "c", "d"] 
2.7.3 :182 > a = [ "a", "a", "b", "b", "c" ]
 => ["a", "a", "b", "b", "c"] 
2.7.3 :183 > a.uniq
 => ["a", "b", "c"] 
2.7.3 :187 > b.uniq {|s| s.first}
 => [["student", "sam"], ["teacher", "matz"]] 
2.7.3 :188 > b.uniq {|s| s[1]}
 => [["student", "sam"], ["student", "george"], ["teacher", "matz"]] 
2.7.3 :189 > b
 => [["student", "sam"], ["student", "george"], ["teacher", "matz"]] 
2.7.3 :190 > b.uniq! {|s| s.first}
 => [["student", "sam"], ["teacher", "matz"]] 
2.7.3 :191 > b
 => [["student", "sam"], ["teacher", "matz"]] 
2.7.3 :192 > a = [ "b", "c", "d" ]
 => ["b", "c", "d"] 
2.7.3 :193 > a.unshift("a") 
 => ["a", "b", "c", "d"] 
2.7.3 :194 > a=%w{a b c d e f}
 => ["a", "b", "c", "d", "e", "f"] 
2.7.3 :195 > a.values_at(1,3,5)
 => ["b", "d", "f"] 
2.7.3 :196 > a.values_at(1,3,5,7)
 => ["b", "d", "f", nil] 
2.7.3 :197 > a.values_at(1,3,5,7).join
 => "bdf" 
2.7.3 :198 > a.values_at(3,4,5).join
 => "def" 
2.7.3 :199 > a=[4,5,6]
 => [4, 5, 6] 
2.7.3 :200 > c=[7,8,9]
 => [7, 8, 9] 
2.7.3 :201 > [1,2,3].zip(a,c)
 => [[1, 4, 7], [2, 5, 8], [3, 6, 9]] 